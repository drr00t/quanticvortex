/**************************************************************************************************

//This code is part of QuanticVortex for latest information, see http://www.quanticvortex.org
//
//Copyright (c) 2009-2010 QuanticMinds Software Ltda.
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in
//all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//THE SOFTWARE.

**************************************************************************************************/


#ifndef __I_GAME_VIEW_H_
#define __I_GAME_VIEW_H_

// system headers
#include <vector>

// QuanticVortex headers
#include "qvGameViewTypes.h"

// external headers
//#include "Poco/SharedPtr.h"


namespace qv
{
namespace views
{

class AbstractGameView
/// abstract to views of game, all game views should derive from
/// this class allow external events as user input, network events,
/// structure allow make very nice things like: listen all events
/// raised by game logic or even game we can recorde this events
/// and use this to replay game. Engine implements views:
///
/// - HumanView:    most important view of our engine, this is
///                 used by local player, getting user events
///                 and translating in game events,
/// - PhysicsView:  allow debug physics drawing collisions, body
/// - RecorderView: record all events raised by game
/// - NetworkView:  represent a remote player attached on game


{
public:

    AbstractGameView(u32 viewHashType)
    :mViewHashId(0),mViewHashType(viewHashType), mViewOrder(0)
    {

    }

    virtual ~AbstractGameView()
    {

    }

    u32 getHashId() const
    /// identification for view
    {
        return mViewHashId;
    }


    u32 getHashType() const
    /// type of view
    {
        return mViewHashType;
    }


    u8 getOrder() const
    /// view order to update on game logic collection views
    {
        return mViewOrder;
    }

    virtual void render( u32 currentTimeMs, u32 elapsedTimeMs) = 0;
    /// render all content of this view

    virtual void update(u32 elapsedTimeMs) = 0;
    /// update content this view, used when
    /// content dependent on time

protected:
        u8 mViewOrder;      /// view order on view collection in GameLogic
        u32 mViewHashType;  /// view type
        u32	mViewHashId;    /// view id is hash generated by SHashedString


private:

    AbstractGameView(const AbstractGameView&);
    AbstractGameView& operator = (const AbstractGameView&);

};

typedef std::vector<AbstractGameView*> GameViewsArray;

}

}
#endif

